import { Router } from "express";

import { AuthenticationController } from "../controllers";

const router = Router();

/**
 * @openapi
 * /authentication/nonce:
 *   post:
 *     description: Generates a nonce for a given wallet
 *     tags: [Authentication]
 *     requestBody:
 *       description: a JSON object containing wallet public key & signed message
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/NonceRequest'
 *           example:
 *             wallet: wallet's public key
 *     responses:
 *       200:
 *         description: Nonce (TTL 60s)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NonceResponse'
 *       4XX:
 *         description: Nonce Creation Failed
 */
router.post("/nonce"
  , AuthenticationController.generateNonce
);

/**
 * @openapi
 * /authentication/login:
 *   post:
 *     description: Creates access token and refresh token for wallet
 *     tags: [Authentication]
 *     requestBody:
 *       description: a JSON object containing wallet public key & signed message
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/AuthTokenCreateRequest'
 *           example:
 *             wallet: wallet's public key
 *             nonce: valid nonce for public key & time generated by server (plaintext of message contents)
 *             message: nonce encrypted by wallets private key
 *     responses:
 *       200:
 *         description: Access Token and Refresh Token pair
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthTokenCreateResponse'
 *       401:
 *         description: Token Pair Creation Failed
 */
router.post("/login"
  , AuthenticationController.verifySignature
  , AuthenticationController.createAccessTokenRefreshTokenPair
);

/**
 * @openapi
 * /authentication/token:
 *   post:
 *     description: Generates a new access token for a client when supplied with valid refresh token
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: [refreshToken]
 *     responses:
 *       200:
 *         description: Returns a new access token valid for the access token lifetime
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthTokenRefreshResponse'
 *       4XX:
 *         description: Token Verification Failed
 *       5XX:
 *         description: Token Creation Failed
 */
router.post(
  "/token"
  , AuthenticationController.verifyRefreshTokenValidity
  , AuthenticationController.refreshAccessToken
);

/**
 * @openapi
 * /authentication/logout:
 *   post:
 *     description: Deletes the refresh token provided in the request from the database
 *     tags: [Authentication]
 *     security:
 *       - bearerAuth: [refreshToken]
 *     responses:
 *       200:
 *         description:
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SimpleStatusResponse'
 *       4XX:
 *         description: Token Deletion Failed
 */
router.post("/logout"
  , AuthenticationController.deleteRefreshToken
);

export default router;
